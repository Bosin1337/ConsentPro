from telegram.ext import ContextTypes
from db.connection import get_db_connection
from psycopg2.extras import RealDictCursor
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

async def check_deadlines(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã —Å–æ–≥–ª–∞—Å–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã.
    """
    logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —Å–æ–≥–ª–∞—Å–∏–π...")
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª, –Ω–æ —Å—Ç–∞—Ç—É—Å –µ—â–µ –Ω–µ "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
            # –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ –∏ —É—á–∏—Ç–µ–ª–µ
            cursor.execute("""
                SELECT
                    c.id AS consent_id,
                    c.name AS consent_name,
                    c.deadline,
                    cl.teacher_id,
                    t.telegram_id AS teacher_telegram_id
                FROM
                    consents c
                JOIN
                    classes cl ON c.class_id = cl.id
                JOIN
                    users t ON cl.teacher_id = t.id
                WHERE
                    c.deadline < NOW() AT TIME ZONE 'UTC'
                    AND c.id IN (
                        SELECT DISTINCT consent_id
                        FROM consent_submissions
                        WHERE status != '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'
                    );
            """)
            expired_consents = cursor.fetchall()

            if not expired_consents:
                logger.info("–ù–µ—Ç —Å–æ–≥–ª–∞—Å–∏–π —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏.")
                return

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(expired_consents)} —Å–æ–≥–ª–∞—Å–∏–π —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏.")

            for consent_data in expired_consents:
                consent_id = consent_data['consent_id']
                consent_name = consent_data['consent_name']
                teacher_telegram_id = consent_data['teacher_telegram_id']

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–∞—á –Ω–∞ "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
                cursor.execute("""
                    UPDATE consent_submissions
                    SET status = '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'
                    WHERE consent_id = %s AND status NOT IN ('–°–¥–∞–Ω–æ', '–û—Ç–∫–∞–∑–∞–ª—Å—è');
                """, (consent_id,))
                updated_rows = cursor.rowcount
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_rows} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è '{consent_name}' (ID: {consent_id}) –Ω–∞ —Å—Ç–∞—Ç—É—Å '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'.")

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —É—á–∏—Ç–µ–ª—é
                if teacher_telegram_id and updated_rows > 0:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ
                        cursor.execute("""
                            SELECT
                                s.full_name
                            FROM
                                consent_submissions cs
                            JOIN
                                students s ON cs.student_id = s.id
                            WHERE
                                cs.consent_id = %s AND cs.status = '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ';
                        """, (consent_id,))
                        students_with_expired = cursor.fetchall()
                        student_names = [s['full_name'] for s in students_with_expired]

                        summary_text = (
                            f"‚ö†Ô∏è –î–µ–¥–ª–∞–π–Ω –ø–æ —Å–æ–≥–ª–∞—Å–∏—é '{consent_name}' (ID: {consent_id}) –∏—Å—Ç–µ–∫.\n"
                            f"–°–ª–µ–¥—É—é—â–∏–µ —É—á–µ–Ω–∏–∫–∏ –Ω–µ —Å–¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –≤–æ–≤—Ä–µ–º—è:\n"
                            f"{chr(10).join(student_names)}"
                        )

                        await context.bot.send_message(chat_id=teacher_telegram_id, text=summary_text)
                        logger.info(f"–°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—á–∏—Ç–µ–ª—é —Å telegram_id {teacher_telegram_id}.")
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É —É—á–∏—Ç–µ–ª—é —Å telegram_id {teacher_telegram_id}: {e}")

            conn.commit()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —Å–æ–≥–ª–∞—Å–∏–π: {e}")
        conn.rollback()
    finally:
        conn.close()
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —Å–æ–≥–ª–∞—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def check_upcoming_deadlines(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –¥–µ–¥–ª–∞–π–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ —Å–æ–≥–ª–∞—Å–∏–π...")
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É, –∑–∞ 3 –¥–Ω—è –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 2023-10-20, —Ç–æ –∏—â–µ–º –¥–µ–¥–ª–∞–π–Ω—ã 2023-10-23
            target_date = datetime.utcnow().date() + timedelta(days=3)
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω—ã, –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ—Å—è –Ω–∞ {target_date}.")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–¥–ª–∞–π–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ target_date
            # –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ, —É—á–∏—Ç–µ–ª–µ –∏ —Ä–æ–¥–∏—Ç–µ–ª—è—Ö —É—á–µ–Ω–∏–∫–æ–≤
            cursor.execute("""
                SELECT
                    c.id AS consent_id,
                    c.name AS consent_name,
                    c.deadline,
                    cl.id AS class_id,
                    cl.name AS class_name,
                    cl.teacher_id,
                    t.telegram_id AS teacher_telegram_id
                FROM
                    consents c
                JOIN
                    classes cl ON c.class_id = cl.id
                JOIN
                    users t ON cl.teacher_id = t.id
                WHERE
                    DATE(c.deadline AT TIME ZONE 'UTC') = %s;
            """, (target_date,))
            upcoming_consents = cursor.fetchall()

            if not upcoming_consents:
                logger.info("–ù–µ—Ç —Å–æ–≥–ª–∞—Å–∏–π —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
                return

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(upcoming_consents)} —Å–æ–≥–ª–∞—Å–∏–π —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –Ω–∞ {target_date}.")

            for consent_data in upcoming_consents:
                consent_id = consent_data['consent_id']
                consent_name = consent_data['consent_name']
                class_name = consent_data['class_name']
                teacher_telegram_id = consent_data['teacher_telegram_id']

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ —Å–¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ (—Å—Ç–∞—Ç—É—Å "–ù–µ —Å–¥–∞–Ω–æ")
                cursor.execute("""
                    SELECT
                        s.id AS student_id,
                        s.full_name AS student_name,
                        p.user_id AS parent_user_id,
                        pu.telegram_id AS parent_telegram_id
                    FROM
                        consent_submissions cs
                    JOIN
                        students s ON cs.student_id = s.id
                    LEFT JOIN
                        parents p ON s.id = p.student_id
                    LEFT JOIN
                        users pu ON p.user_id = pu.id
                    WHERE
                        cs.consent_id = %s AND cs.status = '–ù–µ —Å–¥–∞–Ω–æ';
                """, (consent_id,))
                students_not_submitted = cursor.fetchall()

                if not students_not_submitted:
                    logger.info(f"–í—Å–µ —É—á–µ–Ω–∏–∫–∏ —Å–¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ '{consent_name}' (ID: {consent_id}) –∏–ª–∏ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –Ω–µ–≥–æ.")
                    continue

                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(students_not_submitted)} —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ —Å–¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ '{consent_name}'.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è–º
                reminder_text_to_parents = (
                    f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                    f"–°–æ–≥–ª–∞—Å–∏–µ '{consent_name}' –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–¥–∞–Ω–æ –¥–æ {target_date.strftime('%d.%m.%Y')}.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –≤–æ–≤—Ä–µ–º—è."
                )

                for student_data in students_not_submitted:
                    parent_telegram_id = student_data['parent_telegram_id']
                    student_name = student_data['student_name']
                    if parent_telegram_id:
                        try:
                            await context.bot.send_message(chat_id=parent_telegram_id, text=reminder_text_to_parents)
                            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—é —É—á–µ–Ω–∏–∫–∞ {student_name} (telegram_id {parent_telegram_id}).")
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é —É—á–µ–Ω–∏–∫–∞ {student_name} (telegram_id {parent_telegram_id}): {e}")
                    else:
                        logger.warning(f"–†–æ–¥–∏—Ç–µ–ª—å —É—á–µ–Ω–∏–∫–∞ {student_name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ (–Ω–µ—Ç telegram_id).")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —É—á–∏—Ç–µ–ª—é
                if teacher_telegram_id:
                    try:
                        student_names_list = [s['student_name'] for s in students_not_submitted]
                        summary_text_to_teacher = (
                            f"üìÖ –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º—Å—è –¥–µ–¥–ª–∞–π–Ω–∞–º!\n"
                            f"–°–æ–≥–ª–∞—Å–∏–µ '{consent_name}' –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–¥–∞–Ω–æ –¥–æ {target_date.strftime('%d.%m.%Y')}.\n"
                            f"–°–ª–µ–¥—É—é—â–∏–µ —É—á–µ–Ω–∏–∫–∏ –µ—â–µ –Ω–µ —Å–¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ:\n"
                            f"{chr(10).join(student_names_list)}"
                        )
                        await context.bot.send_message(chat_id=teacher_telegram_id, text=summary_text_to_teacher)
                        logger.info(f"–°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—á–∏—Ç–µ–ª—é —Å telegram_id {teacher_telegram_id}.")
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É —É—á–∏—Ç–µ–ª—é —Å telegram_id {teacher_telegram_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ —Å–æ–≥–ª–∞—Å–∏–π: {e}")
        # conn.rollback() –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    finally:
        conn.close()
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ —Å–æ–≥–ª–∞—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")