from db.connection import get_db_connection
from psycopg2.extras import RealDictCursor
import logging

logger = logging.getLogger(__name__)

def generate_status_report(consent_id: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Å–¥–∞—á–∏ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ consent_id.
    """
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è
            cursor.execute("SELECT name FROM consents WHERE id = %s;", (consent_id,))
            consent_data = cursor.fetchone()
            if not consent_data:
                return f"–û—à–∏–±–∫–∞: –°–æ–≥–ª–∞—Å–∏–µ —Å ID {consent_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

            consent_name = consent_data['name']

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            cursor.execute("""
                SELECT
                    status,
                    COUNT(*) as count
                FROM
                    consent_submissions
                WHERE
                    consent_id = %s
                GROUP BY
                    status;
            """, (consent_id,))
            status_counts = cursor.fetchall()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            report_lines = [f"üìä –û—Ç—á–µ—Ç –ø–æ —Å–æ–≥–ª–∞—Å–∏—é '{consent_name}' (ID: {consent_id})", ""]

            if not status_counts:
                report_lines.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–∞—á–µ —Å–æ–≥–ª–∞—Å–∏—è.")
                return "\n".join(report_lines)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            report_lines.append("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            total_submissions = 0
            for sc in status_counts:
                report_lines.append(f"  - {sc['status']}: {sc['count']}")
                total_submissions += sc['count']

            report_lines.append(f"  - –í—Å–µ–≥–æ: {total_submissions}")
            report_lines.append("")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–∞—Ç—É—Å—É
            for sc in status_counts:
                status = sc['status']
                report_lines.append(f"üë• –£—á–µ–Ω–∏–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':")
                cursor.execute("""
                    SELECT
                        s.full_name
                    FROM
                        consent_submissions cs
                    JOIN
                        students s ON cs.student_id = s.id
                    WHERE
                        cs.consent_id = %s AND cs.status = %s
                    ORDER BY
                        s.full_name;
                """, (consent_id, status))
                students = cursor.fetchall()
                for student in students:
                    report_lines.append(f"  - {student['full_name']}")

            return "\n".join(report_lines)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è {consent_id}: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"
    finally:
        conn.close()


def generate_class_statistics_report() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º.
    """
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
            cursor.execute("SELECT id, name FROM classes ORDER BY name;")
            classes = cursor.fetchall()

            if not classes:
                return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∞—Å—Å–∞—Ö."

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            report_lines = ["üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º", ""]

            for class_info in classes:
                class_id = class_info['id']
                class_name = class_info['name']
                report_lines.append(f"üè´ –ö–ª–∞—Å—Å: {class_name}")

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
                cursor.execute("""
                    SELECT
                        id,
                        name
                    FROM
                        consents
                    WHERE
                        class_id = %s
                    ORDER BY
                        created_at DESC;
                """, (class_id,))
                consents = cursor.fetchall()

                if not consents:
                    report_lines.append("  –ù–µ—Ç —Å–æ–≥–ª–∞—Å–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞.")
                    report_lines.append("")
                    continue

                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                for consent in consents:
                    consent_id = consent['id']
                    consent_name = consent['name']
                    report_lines.append(f"  üìÑ –°–æ–≥–ª–∞—Å–∏–µ: {consent_name} (ID: {consent_id})")

                    cursor.execute("""
                        SELECT
                            status,
                            COUNT(*) as count
                        FROM
                            consent_submissions
                        WHERE
                            consent_id = %s
                        GROUP BY
                            status;
                    """, (consent_id,))
                    status_stats = cursor.fetchall()

                    total_in_class = 0
                    stats_dict = {}
                    for stat in status_stats:
                        stats_dict[stat['status']] = stat['count']
                        total_in_class += stat['count']

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    if total_in_class > 0:
                        submitted_count = stats_dict.get('–°–¥–∞–Ω–æ', 0)
                        refused_count = stats_dict.get('–û—Ç–∫–∞–∑–∞–ª—Å—è', 0)
                        expired_count = stats_dict.get('–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ', 0)
                        not_submitted_count = stats_dict.get('–ù–µ —Å–¥–∞–Ω–æ', 0)

                        submitted_percent = (submitted_count / total_in_class) * 100
                        refused_percent = (refused_count / total_in_class) * 100
                        expired_percent = (expired_count / total_in_class) * 100
                        not_submitted_percent = (not_submitted_count / total_in_class) * 100

                        report_lines.append(f"    ‚úÖ –°–¥–∞–Ω–æ: {submitted_count} ({submitted_percent:.1f}%)")
                        report_lines.append(f"    ‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ: {refused_count} ({refused_percent:.1f}%)")
                        report_lines.append(f"    ‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {expired_count} ({expired_percent:.1f}%)")
                        report_lines.append(f"    üïí –ù–µ —Å–¥–∞–Ω–æ: {not_submitted_count} ({not_submitted_percent:.1f}%)")
                    else:
                        report_lines.append("    –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–∞—á–µ.")

                report_lines.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏

            return "\n".join(report_lines)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}"
    finally:
        conn.close()